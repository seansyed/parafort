# ParaFort Site Configuration
# Place this file in /etc/nginx/sites-available/parafort
# Then create symlink: ln -s /etc/nginx/sites-available/parafort /etc/nginx/sites-enabled/

# Upstream backend servers
upstream parafort_app {
    server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;
    # Add more servers for load balancing if needed
    # server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;

# HTTP server - redirect to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name parafort.com www.parafort.com;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name parafort.com www.parafort.com;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/parafort.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/parafort.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/parafort.com/chain.pem;
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com https://www.google.com https://www.gstatic.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.stripe.com; frame-src https://js.stripe.com;" always;
    
    # Root directory
    root /var/www/parafort/public;
    index index.html;
    
    # Logging
    access_log /var/log/nginx/parafort_access.log;
    error_log /var/log/nginx/parafort_error.log;
    
    # Static assets with long cache
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        
        # Try static files first, then proxy to app
        try_files $uri @proxy_to_app;
    }
    
    # Favicon
    location = /favicon.ico {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri @proxy_to_app;
    }
    
    # Robots and sitemap
    location ~ ^/(robots\.txt|sitemap\.xml)$ {
        expires 1d;
        try_files $uri @proxy_to_app;
    }
    
    # API endpoints with rate limiting
    location /api/ {
        limit_req zone=api burst=50 nodelay;
        limit_req_status 429;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "https://parafort.com" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials true always;
        
        if ($request_method = 'OPTIONS') {
            return 204;
        }
        
        proxy_pass http://parafort_app;
        include /etc/nginx/proxy_params;
    }
    
    # Authentication endpoints with stricter rate limiting
    location ~ ^/(login|register|auth|reset-password|verify-email) {
        limit_req zone=auth burst=10 nodelay;
        limit_req_status 429;
        
        proxy_pass http://parafort_app;
        include /etc/nginx/proxy_params;
    }
    
    # Webhook endpoints (Stripe, etc.)
    location /webhooks/ {
        limit_req zone=api burst=20 nodelay;
        
        proxy_pass http://parafort_app;
        include /etc/nginx/proxy_params;
        
        # Increase body size for webhooks
        client_max_body_size 10M;
    }
    
    # Health check endpoint
    location = /health {
        access_log off;
        proxy_pass http://parafort_app/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
    
    # Admin panel with IP restriction (optional)
    location /admin/ {
        # allow 192.168.1.0/24;  # Your office IP range
        # deny all;
        
        limit_req zone=general burst=20 nodelay;
        proxy_pass http://parafort_app;
        include /etc/nginx/proxy_params;
    }
    
    # Main application
    location / {
        limit_req zone=general burst=20 nodelay;
        
        # Try static files first, then proxy to app
        try_files $uri $uri/ @proxy_to_app;
    }
    
    # Proxy configuration
    location @proxy_to_app {
        proxy_pass http://parafort_app;
        include /etc/nginx/proxy_params;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /var/www/html;
    }
}

# Redirect www to non-www (optional)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.parafort.com;
    
    ssl_certificate /etc/letsencrypt/live/parafort.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/parafort.com/privkey.pem;
    
    return 301 https://parafort.com$request_uri;
}